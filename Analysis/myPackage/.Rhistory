file <- system.file("/Users/markrbower/Dropbox/Documents/Concepts/2018_07_27_meftools/Analysis/meftools/sineWave.png",package="imager")
file
file <- System.file("/Users/markrbower/Dropbox/Documents/Concepts/2018_07_27_meftools/Analysis/meftools/sineWave.png",package="imager")
file <- system.file("/Users/markrbower/Dropbox/Documents/Concepts/2018_07_27_meftools/Analysis/meftools/sineWave.png",package="imager")
file
file <- "/Users/markrbower/Dropbox/Documents/Concepts/2018_07_27_meftools/Analysis/meftools/sineWave.png"
im <- load.image(file)
plot(im)
xlim <- c(0,2000)
plot(im, xlim=c(0,2000))
plot(im, xlim=c(-1,2001))
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(dplyr)
library(docxtools)
time <- seq(1,10000)
voltage1 <- sin( time / (100*2*pi) )
voltage2 <- sin( time / (200*2*pi) )
plot(index,voltage1,type="l",col="red")
lines(index,voltage2)
plot(index,voltage1,type="l",col="red")
lines(index,voltage2)
text( x=c(0,1000,2000),y=c(0,1,1),label=c("0","90",'()'))
text( x=c(0,1000,2000),y=c(0,1,1),label=c("0","90",'90'))
text( x=c(0,1000,2000),y=c(0,1,1),label=c("0","90",'90'),col=("black","red","black"))
text( x=c(0,1000,2000),y=c(0,1,1),label=c("0","90",'90'),col=(1,2,1) )
text( x=c(0,1000,2000), y=c(0,1,1), label=c("0","90",'90'), col=(1,2,1) )
text( x=c(0,1000,2000),y=c(0,1,1),label=c("0","90",'90'),col=("black","red","black"))
text( x=c(0,1000,2000),y=c(0,1,0),label=c("0","90",'100'),col=("red"))
text( x=c(0,1000,2000),y=c(0,1,0),label=c("0","90",'180'),col=("red"))
text( x=c(0,1000,2000),y=c(0,1,0)+.1,label=c("0","90",'180'),col=("red"))
text( x=c(0,1000,2000),y=c(0,.75,0),label=c("0","90",'180'),col=("red"))
text( x=c(0,1000,2000),y=c(0,.75,0),label=c("0","90",'180','270'),col=("red"))
text( x=c(0,1000,2000,3000,4000),y=c(0,.75,0,-.75,0),label=c("0","90",'180','270','0'),col=("red"))
time <- seq(1,10000)
voltage1 <- sin( time / (100*2*pi) )
voltage2 <- sin( time / (200*2*pi) )
plot(index,voltage1,type="l",col="red")
lines(index,voltage2)
text( x=c(0,1000,2000,3000,4000),y=c(0,.75,0,-.75,0),label=c("0","90",'180','270','0'),col=("red"))
text( x=c(0,2000,4000,6000,8000),y=c(0,.75,0,-.75,0),label=c("0","90",'180','270','0'),col=("black"))
time <- seq(1,10000)
voltage1 <- sin( time / (100*2*pi) )
voltage2 <- sin( time / (200*2*pi) )
plot(index,voltage1,type="l",col="red")
lines(index,voltage2)
text( x=c(0,1000,2000,3000,4000),y=c(0,.75,0,-.75,0),label=c("0","90",'180','270','0'),col=("red"))
text( x=c(0,2000,4000,6000,8000),y=c(0,.75,0,-.75,0),label=c("0","90",'180','270','0'),col=("black"))
index <- seq(1,10000)
voltage1 <- sin( time / (100*2*pi) )
voltage2 <- sin( time / (200*2*pi) )
plot(index,voltage1,type="l",col="red")
lines(index,voltage2)
text( x=c(0,1000,2000,3000,4000),y=c(0,.75,0,-.75,0),label=c("0","90",'180','270','0'),col=("red"))
text( x=c(0,2000,4000,6000,8000),y=c(0,.75,0,-.75,0),label=c("0","90",'180','270','0'),col=("black"))
noise <- 0.1*rnorm(10000)
hist( noise )
library(multitaper)
install.packages('multitaper')
library(multitaper)
resSpec <- spec.mtm(voltage1,nw=4.0,k=7)
?ts
voltage1_ts <- ts( voltage1, frequency=32000)
resSpec <- spec.mtm(voltage1_ts,nw=4.0,k=7)
voltage1_ts <- ts( voltage1, frequency=3200)
resSpec <- spec.mtm(voltage1_ts,nw=4.0,k=7)
voltage1_ts <- ts( voltage1, frequency=320)
resSpec <- spec.mtm(voltage1_ts,nw=4.0,k=7)
voltage1_ts <- ts( voltage1, frequency=320000)
resSpec <- spec.mtm(voltage1_ts,nw=4.0,k=7)
voltage1_ts <- ts( voltage1, frequency=400000)
resSpec <- spec.mtm(voltage1_ts,nw=4.0,k=7)
voltage1_ts <- ts( voltage1, frequency=400)
resSpec <- spec.mtm(voltage1_ts,nw=4.0,k=7)
resSpec <- spec.mtm(voltage1_ts,nw=10.0,k=20)
voltage1_ts <- ts( voltage1, frequency=40)
resSpec <- spec.mtm(voltage1_ts,nw=10.0,k=20)
plot( voltage1)
index <- seq(1,10E6)
voltage1 <- sin( index / (100*2*pi))
noise <- 0.1*rnorm(10E6)
ts1 <- ts( voltage1 + noise, frequency=400000)
resSpec <- spec.mtm(ts1,nw=5.0,k=10)
index <- seq(1,1E6)
index <- seq(1,10000)
voltage1 <- sin( index / (2*pi))
plot(voltage1)
voltage1 <- sin( index / (10*2*pi))
plot(voltage1)
voltage1 <- sin( index / (100*2*pi))
plot(voltage1)
voltage1 <- sin( index / (10*2*pi))
plot(voltage1)
plot(voltage1[1:1000])
index <- seq(1,round(2*pi*1000))
voltage1 <- sin( index / (2*pi))
length(idx)
length(index)
noise <- 0.1 * rnorm(length(index))
ts1 <- ts( voltage1 + noise, frequency=628)
resSpec <- spec.mtm(ts1,nw=4.0,k=7)
ts1 <- ts( voltage1 + noise, frequency=63)
resSpec <- spec.mtm(ts1,nw=4.0,k=7)
ts1 <- ts( voltage1 + noise, frequency=6283)
resSpec <- spec.mtm(ts1,nw=4.0,k=7)
plot( voltage1[1:60])
sin(0)
sin(1)
sin(2*pi)
sin(pi)
sin(1)
sin(2)
voltage1 <- sin( index )
plot( voltage1[1:60])
voltage1 <- sin( index / 10 )
plot( voltage1[1:60])
length(index)
ts1 <- ts( voltage1 + noise, frequency=6283)
resSpec <- spec.mtm(ts1,nw=4.0,k=7)
voltage1 <- sin( index / 5 )
ts1 <- ts( voltage1 + noise, frequency=3142)
resSpec <- spec.mtm(ts1,nw=4.0,k=7)
length(voltage1)
length(noise)
length(index)
voltage1 <- voltage1 + noise
install.packages('signal')
V <- c(11,12,13,14,15)
library( iterators )
library( itertools )
iter <- ihasNext( iter(V) )
accumulator <- 0
while ( hasNext(iter) ) { accumulator <- accumulator + V[idx] }
V <- c(11,12,13,14,15)
library( iterators )
library( itertools )
iter <- ihasNext( iter(V) )
accumulator <- 0
while ( hasNext(iter) ) { accumulator <- accumulator + nextElem( iter ) }
print( accumulator )
accumulator <- 0
V <- c(11,12,13,14)
for ( idx in seq(1,5) ) { accumulator <- accumulator + V[idx] }
print( accumulator )
idx <- 1
accumulator <- 0
while ( idx <= 5 ) { accumulator <- accumulator + V[idx]; idx <- idx + 1; }
print( accumulator )
V <- c(11,12,13,14,15)
idx <- 1
accumulator <- 0
while ( idx <= 5 ) { accumulator <- accumulator + V[idx]; idx <- idx + 1; }
print( accumulator )
V <- c(11,12,13,14,15)
accumulator <- 0
for ( idx in seq(1,5) ) { accumulator <- accumulator + V[idx] }
print( accumulator )
blockSamples <- info$ToC[3,1:10]
print( diff( blockSamples ) )
install.packages('numbers')
agm(5.3,.6)
library(numbers)
agm(5.3,.6)
agm(217.9,42.38)
devtools::load_all(".")
rm(list = c("mef_info"))
devtools::load_all(".")
install.packages('lintr')
lintr::lint_package()
version
lintr::lint_package()
devtools::load_all(".")
devtools::load_all(".")
rm(list = c("mef_info"))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
sessionInfo()
install.packages('RMySQL')
library(RMySQL)
sessionInfo()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
sessionInfo()
library(here)
install.packages('here')
library(here)
sessionInfo()
devtools::load_all()
here("../..","Data")
here(Data")
here("Data")
here("CSC1.mef")
set_here("../..", verbose=T)
here("Data")
getwd( here("Data"))
setwd( here("Data"))
setwd("../..")
here()
set_here()
pwd
getwd()
set_here()
here("Data")
here()
getwd()
set_here(path=".")
here()
her()
here()
set_here( path="../..")
here()
setwd("../..")
here()
library(here)
here()
getwd()
setwd("../..")
devtools::load_all()
devtools::load_all()
here()
library(here)
setwd("../..")
library(here)
devtools::load_all()
setwd("../..")
library(here)
devtools::load_all()
here()
setwd("../..")
library(here)
load( here( "R", "mef_info.RData" ) )
filename <- here("../../Data/CSC1.mef" )
filename
info <- mef_info( c( filename, 'erlichda' ) )
set_here( path=here("../.."))
here()
set_here( "../..")
here()
devtools::document()
pwd
getwd()
setwd(here())
getwd()
devtools::document()
?MEFiter
?mef_info
devtools::document()
?SQLcont
?SQLiter
library(meftools)
devtools::document()
devtools::document()
devtools::document()
browseVignettes()
getwd()
devtools::use_vignette("my-vignette")
devtools::build_vignettes()
devtools::use_vignette("my-vignette")
usethis::use_vignette("my-first-vignetter")
devtools::use_testthat()
usethis::use_test("RemoveMe")
a <- list(1:10, letters)
str(a)
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/inst/include/myPackage_types.h')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
.libPaths()
Rcpp::sourceCpp('src/read_header.cpp')
install.packages('Rcpp')
install.packages("Rcpp")
Rcpp::sourceCpp('src/read_header.cpp')
update.packages(checkBuilt=TRUE)
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
install.packages('roxygen2')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
install.packages('knitr')
install.packages('rmarkdown')
install.packages('testthat')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
library(Rcpp)
compileAttributes()
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
Rcpp::sourceCpp('src/read_header.cpp')
h <- read_header()
h <- read_header(c())
h <- read_header(c('a'))
Rcpp::sourceCpp('src/read_header.cpp')
h <- read_header(
)
h <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
h <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
read_header()
Rcpp::sourceCpp('src/read_header.cpp')
read_header()
Rcpp::sourceCpp('src/read_header.cpp')
read_header()
Rcpp::sourceCpp('src/read_header.cpp')
read_header()
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
h = read_header(_)
h = read_header()
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
r <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
r <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
r <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
r <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
r <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
r <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
library(myPackage)
r <- read_header()
Rcpp::sourceCpp('src/read_header.cpp')
Rcpp::sourceCpp('src/read_header.cpp')
r <- read_header()
library(myPackage)
r <- read_header()
library(myPackage)
library(myPackage)
r <- read_header()
devtools::check()
install.packages('devtools')
library(devtools)
devtools::check()
rm(list = c("read_header"))
r <- read_header()
r
r$my_data
